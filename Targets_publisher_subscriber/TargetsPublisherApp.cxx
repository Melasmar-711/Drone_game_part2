// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TargetsPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TargetsPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>

#include "TargetsPubSubTypes.hpp"
#include <fastdds/rtps/transport/TCPv4TransportDescriptor.hpp>





using namespace eprosima::fastdds::dds;

using namespace eprosima::fastdds::rtps;
TargetsPublisherApp::TargetsPublisherApp(
        const int& domain_id)
    : factory_(nullptr)
    , participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new TargetsPubSubType())
    , matched_(0)
    , samples_sent_(0)
    , stop_(false)
{
    //

    DomainParticipantQos pqos = PARTICIPANT_QOS_DEFAULT;

    
    pqos.transport().use_builtin_transports = false;

    // ✅ Use TCPv4TransportDescriptor instead of TCPTransportDescriptor
    std::shared_ptr<TCPv4TransportDescriptor> tcp_transport =std::make_shared<TCPv4TransportDescriptor>();

    // ✅ Configure the TCP transport
    tcp_transport->sendBufferSize = 131072;
    tcp_transport->receiveBufferSize = 131072;
    tcp_transport->add_listener_port(5100);

    // ✅ Add TCP transport to QoS
    pqos.transport().user_transports.push_back(tcp_transport);


   // Set initial peers for discovery
    Locator_t initial_peer;
    initial_peer.kind = LOCATOR_KIND_TCPv4; // Use TCPv4
    IPLocator::setIPv4(initial_peer, "127.0.0.1"); // Set IP address
    initial_peer.port = 5101; // Subscriber's port
    pqos.wire_protocol().builtin.initialPeersList.push_back(initial_peer);




    pqos.name("Targets_pub_participant");

    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("Targets Participant initialization failed");
    }

    // Register the type
    type_.register_type(participant_);

    // Create the publisher
    PublisherQos pub_qos = PUBLISHER_QOS_DEFAULT;
    participant_->get_default_publisher_qos(pub_qos);
    publisher_ = participant_->create_publisher(pub_qos, nullptr, StatusMask::none());
    if (publisher_ == nullptr)
    {
        throw std::runtime_error("Targets Publisher initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("TargetsTopic", type_.get_type_name(), topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("Targets Topic initialization failed");
    }

    // Create the data writer
    DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
    publisher_->get_default_datawriter_qos(writer_qos);
    writer_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    writer_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    writer_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    writer_ = publisher_->create_datawriter(topic_, writer_qos, this, StatusMask::all());
    if (writer_ == nullptr)
    {
        throw std::runtime_error("Targets DataWriter initialization failed");
    }
}

TargetsPublisherApp::~TargetsPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void TargetsPublisherApp::on_publication_matched(
        DataWriter* /*writer*/,
        const PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Targets Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Targets Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void TargetsPublisherApp::run()
{


    const char *fifo_path = "/tmp/target_generator_fifo_pub_0";

    struct stat st;
    if (stat(fifo_path, &st) != 0) {
        if (mkfifo(fifo_path, 0666) < 0) {
            perror("Failed to create FIFO");
            exit(1);
        }
    }

    int fd = open(fifo_path, O_RDONLY);
    if (fd < 0) {
        perror("Failed to open FIFO");
        exit(1);
    }

    //print opened the (fifo name)
    std::cout << "Opened the FIFO: " << fifo_path << std::endl;
    
    while (!is_stopped())
    {

        Targets_gen targets_from_publisher={0};

        ssize_t bytes_read = read(fd, &targets_from_publisher, sizeof(targets_from_publisher));


        if(bytes_read!=0){
        if (publish(&targets_from_publisher))
        {
            std::cout << "Sample '" << std::to_string(++samples_sent_) << "' SENT" << std::endl;
        }

        }
        // Wait for period or stop event
        std::unique_lock<std::mutex> period_lock(mutex_);
        cv_.wait_for(period_lock, std::chrono::milliseconds(10000), [this]()
                {
                    return is_stopped();
                });
    }
}


bool TargetsPublisherApp::publish(Targets_gen *targets_from_publisher)
{
    bool ret = false;
    // Wait for the data endpoints discovery
    std::unique_lock<std::mutex> matched_lock(mutex_);
    cv_.wait(matched_lock, [&]()
            {
                // at least one has been discovered
                return ((matched_ > 0) || is_stopped());
            });


    //make a vector to extract x values from the targets_from_publisher
    std::vector<int32_t> x_values;
    for (int i = 0; i < targets_from_publisher->num_targets; i++) {
        x_values.push_back(targets_from_publisher->targets[i][0]);
    }
    //make a vector to extract y values from the targets_from_publisher
    std::vector<int32_t> y_values;
    for (int i = 0; i < targets_from_publisher->num_targets; i++) {
        y_values.push_back(targets_from_publisher->targets[i][1]);
    }        

    if (!is_stopped())
    {
        /* Initialize your structure here */
        Targets sample_;
        sample_.targets_number(targets_from_publisher->num_targets);
        sample_.targets_x(x_values);
        sample_.targets_y(y_values);
        ret = (RETCODE_OK == writer_->write(&sample_));
    }

    
    return ret;
}


/*{




    bool ret = false;
    // Wait for the data endpoints discovery
    std::unique_lock<std::mutex> matched_lock(mutex_);
    cv_.wait(matched_lock, [&]()
            {
                // at least one has been discovered
                return ((matched_ > 0) || is_stopped());
            });



    // make a for loop that fils two random vectors of int32
            std::vector<int32_t> vector1(10);
            std::vector<int32_t> vector2(10);
            std::generate(vector1.begin(), vector1.end(), []() { return rand() % 100; });
            std::generate(vector2.begin(), vector2.end(), []() { return rand() % 100; });

            // Assuming Targets has members vector1 and vector2


    if (!is_stopped())
    {
        /* Initialize your structure here 
        Targets sample_;
        sample_.targets_x(vector1);
        sample_.targets_y(vector2);
        sample_.targets_number(rand() % 100);
        ret = (RETCODE_OK == writer_->write(&sample_));
    }
    return ret;
}
*/





bool TargetsPublisherApp::is_stopped()
{
    return stop_.load();
}

void TargetsPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
}